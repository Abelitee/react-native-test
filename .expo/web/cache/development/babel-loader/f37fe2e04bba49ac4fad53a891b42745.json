{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Animated from \"react-native-reanimated\";\nimport { useRef } from \"react\";\nimport { onGestureEvent, panGestureHandler, pinchGestureHandler, rotationGestureHandler, tapGestureHandler } from \"./Gesture\";\nimport { vec } from \"./Vectors\";\nimport { loop } from \"./AnimationRunners\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    diff = Animated.diff,\n    set = Animated.set,\n    useCode = Animated.useCode,\n    debug = Animated.debug,\n    block = Animated.block;\n\nvar useLazyRef = function useLazyRef(initializer) {\n  var ref = useRef();\n\n  if (ref.current === undefined) {\n    ref.current = initializer();\n  }\n\n  return ref.current;\n};\n\nexport var useGestureHandler = function useGestureHandler(nativeEvent) {\n  return useLazyRef(function () {\n    return onGestureEvent(nativeEvent);\n  });\n};\nexport var usePanGestureHandler = function usePanGestureHandler() {\n  return useLazyRef(function () {\n    return panGestureHandler();\n  });\n};\nexport var useRotationGestureHandler = function useRotationGestureHandler() {\n  return useLazyRef(function () {\n    return rotationGestureHandler();\n  });\n};\nexport var usePinchGestureHandler = function usePinchGestureHandler() {\n  return useLazyRef(function () {\n    return pinchGestureHandler();\n  });\n};\nexport var useTapGestureHandler = function useTapGestureHandler() {\n  return useLazyRef(function () {\n    return tapGestureHandler();\n  });\n};\nexport var useVector = function useVector() {\n  for (var _len = arguments.length, defaultValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    defaultValues[_key] = arguments[_key];\n  }\n\n  return useLazyRef(function () {\n    return vec.createValue.apply(vec, defaultValues);\n  });\n};\nexport var useVectors = function useVectors() {\n  for (var _len2 = arguments.length, defaultValues = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    defaultValues[_key2] = arguments[_key2];\n  }\n\n  return useLazyRef(function () {\n    return defaultValues.map(function (values) {\n      return vec.createValue.apply(vec, _toConsumableArray(values));\n    });\n  });\n};\nexport var useClock = function useClock() {\n  return useLazyRef(function () {\n    return new Clock();\n  });\n};\nexport var useValue = function useValue(value) {\n  return useLazyRef(function () {\n    return new Value(value);\n  });\n};\nexport var useLoop = function useLoop() {\n  var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n  var boomerang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var progress = useValue(0);\n  useCode(function () {\n    return set(progress, loop({\n      duration: duration,\n      boomerang: boomerang\n    }));\n  }, [progress]);\n  return progress;\n};\nexport var useValues = function useValues() {\n  for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    values[_key3] = arguments[_key3];\n  }\n\n  return useLazyRef(function () {\n    return values.map(function (v) {\n      return new Value(v);\n    });\n  });\n};\nexport var useClocks = function useClocks(numberOfClocks) {\n  return useLazyRef(function () {\n    return new Array(numberOfClocks).fill(0).map(function () {\n      return new Clock();\n    });\n  });\n};\nexport var useDiff = function useDiff(node) {\n  var dDiff = useValue(0);\n  useCode(function () {\n    return set(dDiff, diff(node));\n  }, [dDiff, node]);\n  return dDiff;\n};\nexport var useDebug = function useDebug(values) {\n  var keys = Object.keys(values);\n  useCode(function () {\n    return block(keys.map(function (name) {\n      return debug(name, values[name]);\n    }));\n  }, [keys, values]);\n};","map":{"version":3,"sources":["Hooks.ts"],"names":["Clock","Value","diff","set","useCode","debug","block","Animated","useLazyRef","ref","useRef","initializer","useGestureHandler","onGestureEvent","usePanGestureHandler","panGestureHandler","useRotationGestureHandler","rotationGestureHandler","usePinchGestureHandler","pinchGestureHandler","useTapGestureHandler","tapGestureHandler","useVector","defaultValues","vec","useVectors","useClock","useValue","useLoop","duration","boomerang","progress","loop","useValues","values","useClocks","useDiff","dDiff","useDebug","keys","Object"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport Animated from \"react-native-reanimated\";\nimport { useRef } from \"react\";\nimport {\n  onGestureEvent,\n  panGestureHandler,\n  pinchGestureHandler,\n  rotationGestureHandler,\n  tapGestureHandler,\n} from \"./Gesture\";\nimport { Vector, vec } from \"./Vectors\";\nimport { loop } from \"./AnimationRunners\";\n\nconst { Clock, Value, diff, set, useCode, debug, block } = Animated;\n\nconst useLazyRef = <T>(initializer: () => T) => {\n  const ref = useRef<T>();\n  if (ref.current === undefined) {\n    ref.current = initializer();\n  }\n  return ref.current;\n};\n\nexport const useGestureHandler = (\n  nativeEvent: Parameters<typeof onGestureEvent>[0]\n) => useLazyRef(() => onGestureEvent(nativeEvent));\n\nexport const usePanGestureHandler = () => useLazyRef(() => panGestureHandler());\nexport const useRotationGestureHandler = () =>\n  useLazyRef(() => rotationGestureHandler());\nexport const usePinchGestureHandler = () =>\n  useLazyRef(() => pinchGestureHandler());\nexport const useTapGestureHandler = () => useLazyRef(() => tapGestureHandler());\n\ntype Atomic = string | number | boolean;\n\nexport const useVector = (\n  ...defaultValues: Parameters<typeof vec.createValue>\n) => useLazyRef(() => vec.createValue(...defaultValues));\n\ntype P = Parameters<typeof vec.createValue>;\ntype R = Vector<Animated.Value<number>>;\ntype UseVectors = {\n  (...v: [P]): [R];\n  (...v: [P, P]): [R, R];\n  (...v: [P, P, P]): [R, R, R];\n  (...v: [P, P, P, P]): [R, R, R, R];\n  (...v: [P, P, P, P, P]): [R, R, R, R, R];\n  (...v: [P, P, P, P, P, P]): [R, R, R, R, R, R];\n  (...v: P[]): R[];\n};\n\nexport const useVectors = (((\n  ...defaultValues: Parameters<typeof vec.createValue>[]\n) =>\n  useLazyRef(() =>\n    defaultValues.map((values) => vec.createValue(...values))\n  )) as unknown) as UseVectors;\n\nexport const useClock = () => useLazyRef(() => new Clock());\n\nexport const useValue = <V extends Atomic>(value: V) =>\n  useLazyRef(() => new Value(value));\n\nexport const useLoop = (duration = 1000, boomerang = true) => {\n  const progress = useValue(0);\n  useCode(() => set(progress, loop({ duration, boomerang })), [progress]);\n  return progress;\n};\n\ntype UseValues = {\n  <V extends Atomic>(v: V): [Animated.Value<V>];\n  <V1 extends Atomic, V2 extends Atomic>(v1: V1, v2: V2): [\n    Animated.Value<V1>,\n    Animated.Value<V2>\n  ];\n  <V1 extends Atomic, V2 extends Atomic, V3 extends Atomic>(\n    v1: V1,\n    v2: V2,\n    v3: V3\n  ): [Animated.Value<V1>, Animated.Value<V2>, Animated.Value<V3>];\n  <V1 extends Atomic, V2 extends Atomic, V3 extends Atomic, V4 extends Atomic>(\n    v1: V1,\n    v2: V2,\n    v3: V3,\n    v4: V4\n  ): [\n    Animated.Value<V1>,\n    Animated.Value<V2>,\n    Animated.Value<V3>,\n    Animated.Value<V4>\n  ];\n  <\n    V1 extends Atomic,\n    V2 extends Atomic,\n    V3 extends Atomic,\n    V4 extends Atomic,\n    V5 extends Atomic\n  >(\n    v1: V1,\n    v2: V2,\n    v3: V3,\n    v4: V4,\n    v5: V5\n  ): [\n    Animated.Value<V1>,\n    Animated.Value<V2>,\n    Animated.Value<V3>,\n    Animated.Value<V4>,\n    Animated.Value<V5>\n  ];\n  <V extends Atomic>(...values: V[]): Animated.Value<V>[];\n};\n\nexport const useValues = ((<V extends Atomic>(...values: [V, ...V[]]) =>\n  useLazyRef(() => values.map((v) => new Value(v)))) as unknown) as UseValues;\n\nexport const useClocks = (numberOfClocks: number): Animated.Clock[] =>\n  useLazyRef(() => new Array(numberOfClocks).fill(0).map(() => new Clock()));\n\nexport const useDiff = (node: Animated.Node<number>) => {\n  const dDiff = useValue(0);\n  useCode(() => set(dDiff, diff(node)), [dDiff, node]);\n  return dDiff;\n};\n\nexport const useDebug = (values: { [key: string]: Animated.Node<number> }) => {\n  const keys = Object.keys(values);\n  useCode(() => block(keys.map((name) => debug(name, values[name]))), [\n    keys,\n    values,\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}