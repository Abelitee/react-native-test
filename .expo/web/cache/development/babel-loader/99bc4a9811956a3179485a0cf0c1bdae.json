{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/software/work/rn-first-test/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport { useFonts } from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport { MaterialCommunityIconsPack } from \"./src/theme/MaterialCommunityIcons\";\nimport { FeatherIconsPack } from \"./src/theme/feather-icons\";\nimport { IoniconsIconsPack } from \"./src/theme/Ionicons\";\nimport { FontAwesomeIconsPack } from \"./src/theme/fontawesome\";\nimport { AppNavigator } from \"./src/navigation/navigation\";\nimport { ThemeContext } from \"./src/theme/theme-context\";\nimport { default as themes } from \"./src/theme/custom-theme.json\";\nimport { default as mapping } from \"./mapping.json\";\nimport Track from \"./track\";\nimport { HomeScreen } from \"./src/screens/Home\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar customFonts = {\n  Proxima: require(\"./assets/fonts/proxima-Regular.ttf\"),\n  ProximaSemi: require(\"./assets/fonts/proxima-SemiBold.ttf\"),\n  ProximaBold: require(\"./assets/fonts/proxima-Bold.otf\"),\n  Vibur: require(\"./assets/fonts/Vibur-Regular.ttf\"),\n  Brassmono: require(\"./assets/fonts/brass-mono.otf\"),\n  Sanfrancisco: require(\"./assets/fonts/SanFrancisco.ttf\"),\n  Sofia: require(\"./assets/fonts/SofiaPro-Medium.ttf\")\n};\n\nvar Loaded = function Loaded(_ref) {\n  var userInfo = _ref.userInfo,\n      setUserInfo = _ref.setUserInfo,\n      success = _ref.success,\n      setSuccess = _ref.setSuccess;\n\n  var _useFonts = useFonts(customFonts),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      isLoaded = _useFonts2[0];\n\n  if (!isLoaded) {\n    return React.createElement(AppLoading, null);\n  }\n\n  return React.createElement(AppNavigator, null);\n};\n\nvar removeData = function removeData(value) {\n  return _regeneratorRuntime.async(function removeData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"userInfo\"));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"shit didn't remove\");\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nexport default function App() {\n  var renderCount = React.useRef(0);\n\n  var _React$useState = React.useState(\"light\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      theme = _React$useState2[0],\n      setTheme = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userInfo = _React$useState4[0],\n      setUserInfo = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      success = _React$useState6[0],\n      setSuccess = _React$useState6[1];\n\n  var toggleTheme = function toggleTheme() {\n    var nextTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(nextTheme);\n  };\n\n  React.useEffect(function () {\n    var getUserinfo = function getUserinfo() {\n      var value, json;\n      return _regeneratorRuntime.async(function getUserinfo$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userInfo\"));\n\n            case 3:\n              value = _context2.sent;\n\n              if (!(value !== null && userInfo === null)) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(JSON.parse(value));\n\n            case 7:\n              json = _context2.sent;\n              json === null || userInfo !== null ? null : setUserInfo(json);\n              setSuccess(true);\n\n            case 10:\n              if (value === null && userInfo === null) {\n                setSuccess(false);\n              }\n\n              _context2.next = 16;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(\"shit could not be read\");\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 13]], Promise);\n    };\n\n    getUserinfo();\n  }, [success]);\n  return React.createElement(React.Fragment, null, React.createElement(IconRegistry, {\n    icons: [EvaIconsPack, FeatherIconsPack, FontAwesomeIconsPack, IoniconsIconsPack, MaterialCommunityIconsPack]\n  }), React.createElement(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      toggleTheme: toggleTheme,\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      removeData: removeData,\n      success: success,\n      setSuccess: setSuccess\n    }\n  }, React.createElement(ApplicationProvider, _extends({}, eva, {\n    theme: _objectSpread(_objectSpread({}, eva[theme]), themes),\n    customMapping: mapping\n  }), React.createElement(Loaded, {\n    userInfo: userInfo,\n    setUserInfo: setUserInfo,\n    success: success,\n    setSuccess: setSuccess\n  }))));\n}","map":{"version":3,"sources":["/home/software/work/rn-first-test/App.js"],"names":["StatusBar","React","eva","useFonts","AppLoading","ApplicationProvider","IconRegistry","EvaIconsPack","MaterialCommunityIconsPack","FeatherIconsPack","IoniconsIconsPack","FontAwesomeIconsPack","AppNavigator","ThemeContext","default","themes","mapping","Track","HomeScreen","AsyncStorage","customFonts","Proxima","require","ProximaSemi","ProximaBold","Vibur","Brassmono","Sanfrancisco","Sofia","Loaded","userInfo","setUserInfo","success","setSuccess","isLoaded","removeData","value","removeItem","console","error","App","renderCount","useRef","useState","theme","setTheme","toggleTheme","nextTheme","useEffect","getUserinfo","getItem","JSON","parse","json"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport { useFonts } from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport { MaterialCommunityIconsPack } from \"./src/theme/MaterialCommunityIcons\";\nimport { FeatherIconsPack } from \"./src/theme/feather-icons\";\nimport { IoniconsIconsPack } from \"./src/theme/Ionicons\";\nimport { FontAwesomeIconsPack } from \"./src/theme/fontawesome\";\nimport { AppNavigator } from \"./src/navigation/navigation\";\nimport { ThemeContext } from \"./src/theme/theme-context\";\nimport { default as themes } from \"./src/theme/custom-theme.json\";\nimport { default as mapping } from \"./mapping.json\";\nimport Track from \"./track\";\nimport { HomeScreen } from \"./src/screens/Home\";\n// pack='feather' hidden={true} dark, (eva[theme]),\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\n// import { enableScreens } from \"react-native-screens\";\n// enableScreens();\n\nconst customFonts = {\n  Proxima: require(\"./assets/fonts/proxima-Regular.ttf\"),\n  ProximaSemi: require(\"./assets/fonts/proxima-SemiBold.ttf\"),\n  ProximaBold: require(\"./assets/fonts/proxima-Bold.otf\"),\n  Vibur: require(\"./assets/fonts/Vibur-Regular.ttf\"),\n  Brassmono: require(\"./assets/fonts/brass-mono.otf\"),\n  Sanfrancisco: require(\"./assets/fonts/SanFrancisco.ttf\"),\n  Sofia: require(\"./assets/fonts/SofiaPro-Medium.ttf\"),\n};\n\nconst Loaded = ({ userInfo, setUserInfo, success, setSuccess }) => {\n  const [isLoaded] = useFonts(customFonts);\n\n  if (!isLoaded) {\n    return <AppLoading />;\n  }\n  // from the custom App we return the component we assigned to RootApp.\n\n  return <AppNavigator />; //<HomeScreen />\n};\n\nconst removeData = async (value) => {\n  try {\n    await AsyncStorage.removeItem(\"userInfo\"); //removeItem()\n  } catch (e) {\n    // saving error\n    console.error(\"shit didn't remove\");\n  }\n};\n\nexport default function App() {\n  const renderCount = React.useRef(0);\n\n  const [theme, setTheme] = React.useState(\"light\");\n\n  const [userInfo, setUserInfo] = React.useState(null);\n  const [success, setSuccess] = React.useState(null);\n\n  const toggleTheme = () => {\n    const nextTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(nextTheme);\n  };\n\n  React.useEffect(() => {\n    // renderCount.current = renderCount.current + 1;\n\n    // console.log(renderCount.current);\n\n    const getUserinfo = async () => {\n      try {\n        const value = await AsyncStorage.getItem(\"userInfo\"); //removeItem() getAllKeys()\n        if (value !== null && userInfo === null) {\n          const json = await JSON.parse(value);\n\n          json === null || userInfo !== null ? null : setUserInfo(json); // setUserInfo(json)\n          setSuccess(true);\n        }\n        if (value === null && userInfo === null) {\n          setSuccess(false);\n        }\n      } catch (e) {\n        // error reading value\n        console.error(\"shit could not be read\");\n      }\n    };\n\n    getUserinfo();\n  }, [success]);\n\n  return (\n    <>\n      <IconRegistry\n        icons={[\n          EvaIconsPack,\n          FeatherIconsPack,\n          FontAwesomeIconsPack,\n          IoniconsIconsPack,\n          MaterialCommunityIconsPack,\n        ]}\n      />\n      <ThemeContext.Provider\n        value={{\n          theme,\n          toggleTheme,\n          userInfo,\n          setUserInfo,\n          removeData,\n          success,\n          setSuccess,\n        }}\n      >\n        <ApplicationProvider\n          {...eva}\n          theme={{ ...eva[theme], ...themes }}\n          customMapping={mapping}\n        >\n          {/* <StatusBar style=\"auto\" /> */}\n          <Loaded\n            userInfo={userInfo}\n            setUserInfo={setUserInfo}\n            success={success}\n            setSuccess={setSuccess}\n          />\n        </ApplicationProvider>\n      </ThemeContext.Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}