{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// /**\n//  * @flow\n//  */\n\n// import React from \"react\";\n// import {\n//   Dimensions,\n//   Image,\n//   Slider,\n//   StyleSheet,\n//   Text,\n//   TouchableHighlight,\n//   View,\n// } from \"react-native\";\n// import { Asset } from \"expo-asset\";\n// import { Audio, Video } from \"expo-av\";\n// import * as Font from \"expo-font\";\n\n// import { MaterialIcons } from \"@expo/vector-icons\";\n\n// class Icon {\n//   constructor(module, width, height) {\n//     this.module = module;\n//     this.width = width;\n//     this.height = height;\n//     Asset.fromModule(this.module).downloadAsync();\n//   }\n// }\n\n// class PlaylistItem {\n//   constructor(name, uri, isVideo) {\n//     this.name = name;\n//     this.uri = uri;\n//     this.isVideo = isVideo;\n//   }\n// }\n\n// const PLAYLIST = [\n//   new PlaylistItem(\n//     \"Comfort Fit - “Sorry”\",\n//     \"https://www.naijavibes.com/wp-content/uploads/2020/09/Tems-Damages.mp3?_=1\",\n//     false\n//   ),\n// ];\n\n// const ICON_THROUGH_EARPIECE = \"speaker-phone\";\n// const ICON_THROUGH_SPEAKER = \"speaker\";\n\n// const ICON_PLAY_BUTTON = new Icon(\n//   require(\"./assets/images/play_button.png\"),\n//   34,\n//   51\n// );\n// const ICON_PAUSE_BUTTON = new Icon(\n//   require(\"./assets/images/pause_button.png\"),\n//   34,\n//   51\n// );\n// const ICON_STOP_BUTTON = new Icon(\n//   require(\"./assets/images/stop_button.png\"),\n//   22,\n//   22\n// );\n// const ICON_FORWARD_BUTTON = new Icon(\n//   require(\"./assets/images/forward_button.png\"),\n//   33,\n//   25\n// );\n// const ICON_BACK_BUTTON = new Icon(\n//   require(\"./assets/images/back_button.png\"),\n//   33,\n//   25\n// );\n\n// const ICON_LOOP_ALL_BUTTON = new Icon(\n//   require(\"./assets/images/loop_all_button.png\"),\n//   77,\n//   35\n// );\n// const ICON_LOOP_ONE_BUTTON = new Icon(\n//   require(\"./assets/images/loop_one_button.png\"),\n//   77,\n//   35\n// );\n\n// const ICON_MUTED_BUTTON = new Icon(\n//   require(\"./assets/images/muted_button.png\"),\n//   67,\n//   58\n// );\n// const ICON_UNMUTED_BUTTON = new Icon(\n//   require(\"./assets/images/unmuted_button.png\"),\n//   67,\n//   58\n// );\n\n// const ICON_TRACK_1 = new Icon(require(\"./assets/images/track_1.png\"), 166, 5);\n// const ICON_THUMB_1 = new Icon(require(\"./assets/images/thumb_1.png\"), 18, 19);\n// const ICON_THUMB_2 = new Icon(require(\"./assets/images/thumb_2.png\"), 15, 19);\n\n// const LOOPING_TYPE_ALL = 0;\n// const LOOPING_TYPE_ONE = 1;\n// const LOOPING_TYPE_ICONS = { 0: ICON_LOOP_ALL_BUTTON, 1: ICON_LOOP_ONE_BUTTON };\n\n// const { width: DEVICE_WIDTH, height: DEVICE_HEIGHT } = Dimensions.get(\"window\");\n// const BACKGROUND_COLOR = \"#FFF8ED\";\n// const DISABLED_OPACITY = 0.5;\n// const FONT_SIZE = 14;\n// const LOADING_STRING = \"... loading ...\";\n// const BUFFERING_STRING = \"...buffering...\";\n// const RATE_SCALE = 3.0;\n// const VIDEO_CONTAINER_HEIGHT = (DEVICE_HEIGHT * 2.0) / 5.0 - FONT_SIZE * 2;\n\n// export default class Track extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.index = 0;\n//     this.isSeeking = false;\n//     this.shouldPlayAtEndOfSeek = false;\n//     this.playbackInstance = null;\n//     this.state = {\n//       showVideo: false,\n//       playbackInstanceName: LOADING_STRING,\n//       loopingType: LOOPING_TYPE_ALL,\n//       muted: false,\n//       playbackInstancePosition: null,\n//       playbackInstanceDuration: null,\n//       shouldPlay: false,\n//       isPlaying: false,\n//       isBuffering: false,\n//       isLoading: true,\n//       fontLoaded: false,\n//       shouldCorrectPitch: true,\n//       volume: 1.0,\n//       rate: 1.0,\n//       videoWidth: DEVICE_WIDTH,\n//       videoHeight: VIDEO_CONTAINER_HEIGHT,\n//       poster: false,\n//       useNativeControls: false,\n//       fullscreen: false,\n//       throughEarpiece: false,\n//     };\n//   }\n\n//   componentDidMount() {\n//     Audio.setAudioModeAsync({\n//       allowsRecordingIOS: false,\n//       staysActiveInBackground: false,\n//       interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n//       playsInSilentModeIOS: true,\n//       shouldDuckAndroid: true,\n//       interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n//       playThroughEarpieceAndroid: false,\n//     });\n//     (async () => {\n//       await Font.loadAsync({\n//         ...MaterialIcons.font,\n//         \"cutive-mono-regular\": require(\"./assets/fonts/CutiveMono-Regular.ttf\"),\n//       });\n//       this.setState({ fontLoaded: true });\n//     })();\n//   }\n\n//   async _loadNewPlaybackInstance(playing) {\n//     if (this.playbackInstance != null) {\n//       await this.playbackInstance.unloadAsync();\n//       // this.playbackInstance.setOnPlaybackStatusUpdate(null);\n//       this.playbackInstance = null;\n//     }\n\n//     const source = { uri: PLAYLIST[this.index].uri };\n//     const initialStatus = {\n//       shouldPlay: playing,\n//       rate: this.state.rate,\n//       shouldCorrectPitch: this.state.shouldCorrectPitch,\n//       volume: this.state.volume,\n//       isMuted: this.state.muted,\n//       isLooping: this.state.loopingType === LOOPING_TYPE_ONE,\n//       // // UNCOMMENT THIS TO TEST THE OLD androidImplementation:\n//       // androidImplementation: 'MediaPlayer',\n//     };\n\n//     if (PLAYLIST[this.index].isVideo) {\n//       console.log(this._onPlaybackStatusUpdate);\n//       await this._video.loadAsync(source, initialStatus);\n//       // this._video.onPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n//       this.playbackInstance = this._video;\n//       const status = await this._video.getStatusAsync();\n//     } else {\n//       const { sound, status } = await Audio.Sound.createAsync(\n//         source,\n//         initialStatus,\n//         this._onPlaybackStatusUpdate\n//       );\n//       this.playbackInstance = sound;\n//     }\n\n//     this._updateScreenForLoading(false);\n//   }\n\n//   _mountVideo = (component) => {\n//     this._video = component;\n//     this._loadNewPlaybackInstance(false);\n//   };\n\n//   _updateScreenForLoading(isLoading) {\n//     if (isLoading) {\n//       this.setState({\n//         showVideo: false,\n//         isPlaying: false,\n//         playbackInstanceName: LOADING_STRING,\n//         playbackInstanceDuration: null,\n//         playbackInstancePosition: null,\n//         isLoading: true,\n//       });\n//     } else {\n//       this.setState({\n//         playbackInstanceName: PLAYLIST[this.index].name,\n//         showVideo: PLAYLIST[this.index].isVideo,\n//         isLoading: false,\n//       });\n//     }\n//   }\n\n//   _onPlaybackStatusUpdate = (status) => {\n//     if (status.isLoaded) {\n//       this.setState({\n//         playbackInstancePosition: status.positionMillis,\n//         playbackInstanceDuration: status.durationMillis,\n//         shouldPlay: status.shouldPlay,\n//         isPlaying: status.isPlaying,\n//         isBuffering: status.isBuffering,\n//         rate: status.rate,\n//         muted: status.isMuted,\n//         volume: status.volume,\n//         loopingType: status.isLooping ? LOOPING_TYPE_ONE : LOOPING_TYPE_ALL,\n//         shouldCorrectPitch: status.shouldCorrectPitch,\n//       });\n//       if (status.didJustFinish && !status.isLooping) {\n//         this._advanceIndex(true);\n//         this._updatePlaybackInstanceForIndex(true);\n//       }\n//     } else {\n//       if (status.error) {\n//         console.log(`FATAL PLAYER ERROR: ${status.error}`);\n//       }\n//     }\n//   };\n\n//   _onLoadStart = () => {\n//     console.log(`ON LOAD START`);\n//   };\n\n//   _onLoad = (status) => {\n//     console.log(`ON LOAD : ${JSON.stringify(status)}`);\n//   };\n\n//   _onError = (error) => {\n//     console.log(`ON ERROR : ${error}`);\n//   };\n\n//   _onReadyForDisplay = (event) => {\n//     const widestHeight =\n//       (DEVICE_WIDTH * event.naturalSize.height) / event.naturalSize.width;\n//     if (widestHeight > VIDEO_CONTAINER_HEIGHT) {\n//       this.setState({\n//         videoWidth:\n//           (VIDEO_CONTAINER_HEIGHT * event.naturalSize.width) /\n//           event.naturalSize.height,\n//         videoHeight: VIDEO_CONTAINER_HEIGHT,\n//       });\n//     } else {\n//       this.setState({\n//         videoWidth: DEVICE_WIDTH,\n//         videoHeight:\n//           (DEVICE_WIDTH * event.naturalSize.height) / event.naturalSize.width,\n//       });\n//     }\n//   };\n\n//   _onFullscreenUpdate = (event) => {\n//     console.log(\n//       `FULLSCREEN UPDATE : ${JSON.stringify(event.fullscreenUpdate)}`\n//     );\n//   };\n\n//   _advanceIndex(forward) {\n//     this.index =\n//       (this.index + (forward ? 1 : PLAYLIST.length - 1)) % PLAYLIST.length;\n//   }\n\n//   async _updatePlaybackInstanceForIndex(playing) {\n//     this._updateScreenForLoading(true);\n\n//     this.setState({\n//       videoWidth: DEVICE_WIDTH,\n//       videoHeight: VIDEO_CONTAINER_HEIGHT,\n//     });\n\n//     this._loadNewPlaybackInstance(playing);\n//   }\n\n//   _onPlayPausePressed = () => {\n//     if (this.playbackInstance != null) {\n//       if (this.state.isPlaying) {\n//         this.playbackInstance.pauseAsync();\n//       } else {\n//         this.playbackInstance.playAsync();\n//       }\n//     }\n//   };\n\n//   _onStopPressed = () => {\n//     if (this.playbackInstance != null) {\n//       this.playbackInstance.stopAsync();\n//     }\n//   };\n\n//   _onForwardPressed = () => {\n//     if (this.playbackInstance != null) {\n//       this._advanceIndex(true);\n//       this._updatePlaybackInstanceForIndex(this.state.shouldPlay);\n//     }\n//   };\n\n//   _onBackPressed = () => {\n//     if (this.playbackInstance != null) {\n//       this._advanceIndex(false);\n//       this._updatePlaybackInstanceForIndex(this.state.shouldPlay);\n//     }\n//   };\n\n//   _onMutePressed = () => {\n//     if (this.playbackInstance != null) {\n//       this.playbackInstance.setIsMutedAsync(!this.state.muted);\n//     }\n//   };\n\n//   _onLoopPressed = () => {\n//     if (this.playbackInstance != null) {\n//       this.playbackInstance.setIsLoopingAsync(\n//         this.state.loopingType !== LOOPING_TYPE_ONE\n//       );\n//     }\n//   };\n\n//   _onVolumeSliderValueChange = (value) => {\n//     if (this.playbackInstance != null) {\n//       this.playbackInstance.setVolumeAsync(value);\n//     }\n//   };\n\n//   _trySetRate = async (rate, shouldCorrectPitch) => {\n//     if (this.playbackInstance != null) {\n//       try {\n//         await this.playbackInstance.setRateAsync(rate, shouldCorrectPitch);\n//       } catch (error) {\n//         // Rate changing could not be performed, possibly because the client's Android API is too old.\n//       }\n//     }\n//   };\n\n//   _onRateSliderSlidingComplete = async (value) => {\n//     this._trySetRate(value * RATE_SCALE, this.state.shouldCorrectPitch);\n//   };\n\n//   _onPitchCorrectionPressed = async (value) => {\n//     this._trySetRate(this.state.rate, !this.state.shouldCorrectPitch);\n//   };\n\n//   _onSeekSliderValueChange = (value) => {\n//     if (this.playbackInstance != null && !this.isSeeking) {\n//       this.isSeeking = true;\n//       this.shouldPlayAtEndOfSeek = this.state.shouldPlay;\n//       this.playbackInstance.pauseAsync();\n//     }\n//   };\n\n//   _onSeekSliderSlidingComplete = async (value) => {\n//     if (this.playbackInstance != null) {\n//       this.isSeeking = false;\n//       const seekPosition = value * this.state.playbackInstanceDuration;\n//       if (this.shouldPlayAtEndOfSeek) {\n//         this.playbackInstance.playFromPositionAsync(seekPosition);\n//       } else {\n//         this.playbackInstance.setPositionAsync(seekPosition);\n//       }\n//     }\n//   };\n\n//   _getSeekSliderPosition() {\n//     if (\n//       this.playbackInstance != null &&\n//       this.state.playbackInstancePosition != null &&\n//       this.state.playbackInstanceDuration != null\n//     ) {\n//       return (\n//         this.state.playbackInstancePosition /\n//         this.state.playbackInstanceDuration\n//       );\n//     }\n//     return 0;\n//   }\n\n//   _getMMSSFromMillis(millis) {\n//     const totalSeconds = millis / 1000;\n//     const seconds = Math.floor(totalSeconds % 60);\n//     const minutes = Math.floor(totalSeconds / 60);\n\n//     const padWithZero = (number) => {\n//       const string = number.toString();\n//       if (number < 10) {\n//         return \"0\" + string;\n//       }\n//       return string;\n//     };\n//     return padWithZero(minutes) + \":\" + padWithZero(seconds);\n//   }\n\n//   _getTimestamp() {\n//     if (\n//       this.playbackInstance != null &&\n//       this.state.playbackInstancePosition != null &&\n//       this.state.playbackInstanceDuration != null\n//     ) {\n//       return `${this._getMMSSFromMillis(\n//         this.state.playbackInstancePosition\n//       )} / ${this._getMMSSFromMillis(this.state.playbackInstanceDuration)}`;\n//     }\n//     return \"\";\n//   }\n\n//   _onPosterPressed = () => {\n//     this.setState({ poster: !this.state.poster });\n//   };\n\n//   _onUseNativeControlsPressed = () => {\n//     this.setState({ useNativeControls: !this.state.useNativeControls });\n//   };\n\n//   _onFullscreenPressed = () => {\n//     try {\n//       this._video.presentFullscreenPlayer();\n//     } catch (error) {\n//       console.log(error.toString());\n//     }\n//   };\n\n//   _onSpeakerPressed = () => {\n//     this.setState(\n//       (state) => {\n//         return { throughEarpiece: !state.throughEarpiece };\n//       },\n//       ({ throughEarpiece }) =>\n//         Audio.setAudioModeAsync({\n//           allowsRecordingIOS: false,\n//           interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n//           playsInSilentModeIOS: true,\n//           shouldDuckAndroid: true,\n//           interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n//           playThroughEarpieceAndroid: throughEarpiece,\n//         })\n//     );\n//   };\n\n//   render() {\n//     return !this.state.fontLoaded ? (\n//       <View style={styles.emptyContainer} />\n//     ) : (\n//       <View style={styles.container}>\n//         <View />\n//         <View style={styles.nameContainer}>\n//           <Text style={[styles.text, { fontFamily: \"cutive-mono-regular\" }]}>\n//             {this.state.playbackInstanceName}\n//           </Text>\n//         </View>\n//         <View style={styles.space} />\n//         <View style={styles.videoContainer}>\n//           <Video\n//             ref={this._mountVideo}\n//             style={[\n//               styles.video,\n//               {\n//                 opacity: this.state.showVideo ? 1.0 : 0.0,\n//                 width: this.state.videoWidth,\n//                 height: this.state.videoHeight,\n//               },\n//             ]}\n//             resizeMode={Video.RESIZE_MODE_CONTAIN}\n//             onPlaybackStatusUpdate={this._onPlaybackStatusUpdate}\n//             onLoadStart={this._onLoadStart}\n//             onLoad={this._onLoad}\n//             onError={this._onError}\n//             onFullscreenUpdate={this._onFullscreenUpdate}\n//             onReadyForDisplay={this._onReadyForDisplay}\n//             useNativeControls={this.state.useNativeControls}\n//           />\n//         </View>\n//         <View\n//           style={[\n//             styles.playbackContainer,\n//             {\n//               opacity: this.state.isLoading ? DISABLED_OPACITY : 1.0,\n//             },\n//           ]}\n//         >\n//           <Slider\n//             style={styles.playbackSlider}\n//             trackImage={ICON_TRACK_1.module}\n//             thumbImage={ICON_THUMB_1.module}\n//             value={this._getSeekSliderPosition()}\n//             onValueChange={this._onSeekSliderValueChange}\n//             onSlidingComplete={this._onSeekSliderSlidingComplete}\n//             disabled={this.state.isLoading}\n//           />\n//           <View style={styles.timestampRow}>\n//             <Text\n//               style={[\n//                 styles.text,\n//                 styles.buffering,\n//                 { fontFamily: \"cutive-mono-regular\" },\n//               ]}\n//             >\n//               {this.state.isBuffering ? BUFFERING_STRING : \"\"}\n//             </Text>\n//             <Text\n//               style={[\n//                 styles.text,\n//                 styles.timestamp,\n//                 { fontFamily: \"cutive-mono-regular\" },\n//               ]}\n//             >\n//               {this._getTimestamp()}\n//             </Text>\n//           </View>\n//         </View>\n//         <View\n//           style={[\n//             styles.buttonsContainerBase,\n//             styles.buttonsContainerTopRow,\n//             {\n//               opacity: this.state.isLoading ? DISABLED_OPACITY : 1.0,\n//             },\n//           ]}\n//         >\n//           <TouchableHighlight\n//             underlayColor={BACKGROUND_COLOR}\n//             style={styles.wrapper}\n//             onPress={this._onBackPressed}\n//             disabled={this.state.isLoading}\n//           >\n//             <Image style={styles.button} source={ICON_BACK_BUTTON.module} />\n//           </TouchableHighlight>\n//           <TouchableHighlight\n//             underlayColor={BACKGROUND_COLOR}\n//             style={styles.wrapper}\n//             onPress={this._onPlayPausePressed}\n//             disabled={this.state.isLoading}\n//           >\n//             <Image\n//               style={styles.button}\n//               source={\n//                 this.state.isPlaying\n//                   ? ICON_PAUSE_BUTTON.module\n//                   : ICON_PLAY_BUTTON.module\n//               }\n//             />\n//           </TouchableHighlight>\n//           <TouchableHighlight\n//             underlayColor={BACKGROUND_COLOR}\n//             style={styles.wrapper}\n//             onPress={this._onStopPressed}\n//             disabled={this.state.isLoading}\n//           >\n//             <Image style={styles.button} source={ICON_STOP_BUTTON.module} />\n//           </TouchableHighlight>\n//           <TouchableHighlight\n//             underlayColor={BACKGROUND_COLOR}\n//             style={styles.wrapper}\n//             onPress={this._onForwardPressed}\n//             disabled={this.state.isLoading}\n//           >\n//             <Image style={styles.button} source={ICON_FORWARD_BUTTON.module} />\n//           </TouchableHighlight>\n//         </View>\n//         <View\n//           style={[\n//             styles.buttonsContainerBase,\n//             styles.buttonsContainerMiddleRow,\n//           ]}\n//         >\n//           <View style={styles.volumeContainer}>\n//             <TouchableHighlight\n//               underlayColor={BACKGROUND_COLOR}\n//               style={styles.wrapper}\n//               onPress={this._onMutePressed}\n//             >\n//               <Image\n//                 style={styles.button}\n//                 source={\n//                   this.state.muted\n//                     ? ICON_MUTED_BUTTON.module\n//                     : ICON_UNMUTED_BUTTON.module\n//                 }\n//               />\n//             </TouchableHighlight>\n//             <Slider\n//               style={styles.volumeSlider}\n//               trackImage={ICON_TRACK_1.module}\n//               thumbImage={ICON_THUMB_2.module}\n//               value={1}\n//               onValueChange={this._onVolumeSliderValueChange}\n//             />\n//           </View>\n//           <TouchableHighlight\n//             underlayColor={BACKGROUND_COLOR}\n//             style={styles.wrapper}\n//             onPress={this._onLoopPressed}\n//           >\n//             <Image\n//               style={styles.button}\n//               source={LOOPING_TYPE_ICONS[this.state.loopingType].module}\n//             />\n//           </TouchableHighlight>\n//         </View>\n//         <View\n//           style={[\n//             styles.buttonsContainerBase,\n//             styles.buttonsContainerBottomRow,\n//           ]}\n//         >\n//           <TouchableHighlight\n//             underlayColor={BACKGROUND_COLOR}\n//             style={styles.wrapper}\n//             onPress={() => this._trySetRate(1.0, this.state.shouldCorrectPitch)}\n//           >\n//             <View style={styles.button}>\n//               <Text\n//                 style={[styles.text, { fontFamily: \"cutive-mono-regular\" }]}\n//               >\n//                 Rate:\n//               </Text>\n//             </View>\n//           </TouchableHighlight>\n//           <Slider\n//             style={styles.rateSlider}\n//             trackImage={ICON_TRACK_1.module}\n//             thumbImage={ICON_THUMB_1.module}\n//             value={this.state.rate / RATE_SCALE}\n//             onSlidingComplete={this._onRateSliderSlidingComplete}\n//           />\n//           <TouchableHighlight\n//             underlayColor={BACKGROUND_COLOR}\n//             style={styles.wrapper}\n//             onPress={this._onPitchCorrectionPressed}\n//           >\n//             <View style={styles.button}>\n//               <Text\n//                 style={[styles.text, { fontFamily: \"cutive-mono-regular\" }]}\n//               >\n//                 PC: {this.state.shouldCorrectPitch ? \"yes\" : \"no\"}\n//               </Text>\n//             </View>\n//           </TouchableHighlight>\n//           <TouchableHighlight\n//             onPress={this._onSpeakerPressed}\n//             underlayColor={BACKGROUND_COLOR}\n//           >\n//             <MaterialIcons\n//               name={\n//                 this.state.throughEarpiece\n//                   ? ICON_THROUGH_EARPIECE\n//                   : ICON_THROUGH_SPEAKER\n//               }\n//               size={32}\n//               color=\"black\"\n//             />\n//           </TouchableHighlight>\n//         </View>\n//         <View />\n//         {this.state.showVideo ? (\n//           <View>\n//             <View\n//               style={[\n//                 styles.buttonsContainerBase,\n//                 styles.buttonsContainerTextRow,\n//               ]}\n//             >\n//               <View />\n//               <TouchableHighlight\n//                 underlayColor={BACKGROUND_COLOR}\n//                 style={styles.wrapper}\n//                 onPress={this._onPosterPressed}\n//               >\n//                 <View style={styles.button}>\n//                   <Text\n//                     style={[styles.text, { fontFamily: \"cutive-mono-regular\" }]}\n//                   >\n//                     Poster: {this.state.poster ? \"yes\" : \"no\"}\n//                   </Text>\n//                 </View>\n//               </TouchableHighlight>\n//               <View />\n//               <TouchableHighlight\n//                 underlayColor={BACKGROUND_COLOR}\n//                 style={styles.wrapper}\n//                 onPress={this._onFullscreenPressed}\n//               >\n//                 <View style={styles.button}>\n//                   <Text\n//                     style={[styles.text, { fontFamily: \"cutive-mono-regular\" }]}\n//                   >\n//                     Fullscreen\n//                   </Text>\n//                 </View>\n//               </TouchableHighlight>\n//               <View />\n//             </View>\n//             <View style={styles.space} />\n//             <View\n//               style={[\n//                 styles.buttonsContainerBase,\n//                 styles.buttonsContainerTextRow,\n//               ]}\n//             >\n//               <View />\n//               <TouchableHighlight\n//                 underlayColor={BACKGROUND_COLOR}\n//                 style={styles.wrapper}\n//                 onPress={this._onUseNativeControlsPressed}\n//               >\n//                 <View style={styles.button}>\n//                   <Text\n//                     style={[styles.text, { fontFamily: \"cutive-mono-regular\" }]}\n//                   >\n//                     Native Controls:{\" \"}\n//                     {this.state.useNativeControls ? \"yes\" : \"no\"}\n//                   </Text>\n//                 </View>\n//               </TouchableHighlight>\n//               <View />\n//             </View>\n//           </View>\n//         ) : null}\n//       </View>\n//     );\n//   }\n// }\n\n// const styles = StyleSheet.create({\n//   emptyContainer: {\n//     alignSelf: \"stretch\",\n//     backgroundColor: BACKGROUND_COLOR,\n//   },\n//   container: {\n//     flex: 1,\n//     flexDirection: \"column\",\n//     justifyContent: \"space-between\",\n//     alignItems: \"center\",\n//     alignSelf: \"stretch\",\n//     backgroundColor: BACKGROUND_COLOR,\n//   },\n//   wrapper: {},\n//   nameContainer: {\n//     height: FONT_SIZE,\n//   },\n//   space: {\n//     height: FONT_SIZE,\n//   },\n//   videoContainer: {\n//     height: VIDEO_CONTAINER_HEIGHT,\n//   },\n//   video: {\n//     maxWidth: DEVICE_WIDTH,\n//   },\n//   playbackContainer: {\n//     flex: 1,\n//     flexDirection: \"column\",\n//     justifyContent: \"space-between\",\n//     alignItems: \"center\",\n//     alignSelf: \"stretch\",\n//     minHeight: ICON_THUMB_1.height * 2.0,\n//     maxHeight: ICON_THUMB_1.height * 2.0,\n//   },\n//   playbackSlider: {\n//     alignSelf: \"stretch\",\n//   },\n//   timestampRow: {\n//     flex: 1,\n//     flexDirection: \"row\",\n//     alignItems: \"center\",\n//     justifyContent: \"space-between\",\n//     alignSelf: \"stretch\",\n//     minHeight: FONT_SIZE,\n//   },\n//   text: {\n//     fontSize: FONT_SIZE,\n//     minHeight: FONT_SIZE,\n//   },\n//   buffering: {\n//     textAlign: \"left\",\n//     paddingLeft: 20,\n//   },\n//   timestamp: {\n//     textAlign: \"right\",\n//     paddingRight: 20,\n//   },\n//   button: {\n//     backgroundColor: BACKGROUND_COLOR,\n//   },\n//   buttonsContainerBase: {\n//     flex: 1,\n//     flexDirection: \"row\",\n//     alignItems: \"center\",\n//     justifyContent: \"space-between\",\n//   },\n//   buttonsContainerTopRow: {\n//     maxHeight: ICON_PLAY_BUTTON.height,\n//     minWidth: DEVICE_WIDTH / 2.0,\n//     maxWidth: DEVICE_WIDTH / 2.0,\n//   },\n//   buttonsContainerMiddleRow: {\n//     maxHeight: ICON_MUTED_BUTTON.height,\n//     alignSelf: \"stretch\",\n//     paddingRight: 20,\n//   },\n//   volumeContainer: {\n//     flex: 1,\n//     flexDirection: \"row\",\n//     alignItems: \"center\",\n//     justifyContent: \"space-between\",\n//     minWidth: DEVICE_WIDTH / 2.0,\n//     maxWidth: DEVICE_WIDTH / 2.0,\n//   },\n//   volumeSlider: {\n//     width: DEVICE_WIDTH / 2.0 - ICON_MUTED_BUTTON.width,\n//   },\n//   buttonsContainerBottomRow: {\n//     maxHeight: ICON_THUMB_1.height,\n//     alignSelf: \"stretch\",\n//     paddingRight: 20,\n//     paddingLeft: 20,\n//   },\n//   rateSlider: {\n//     width: DEVICE_WIDTH / 2.0,\n//   },\n//   buttonsContainerTextRow: {\n//     maxHeight: FONT_SIZE,\n//     alignItems: \"center\",\n//     paddingRight: 20,\n//     paddingLeft: 20,\n//     minWidth: DEVICE_WIDTH,\n//     maxWidth: DEVICE_WIDTH,\n//   },\n// });\n"]},"metadata":{},"sourceType":"script"}