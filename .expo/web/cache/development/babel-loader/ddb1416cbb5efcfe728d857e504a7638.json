{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/software/work/Challenge/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport { useFonts } from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport { MaterialCommunityIconsPack } from \"./src/theme/MaterialCommunityIcons\";\nimport { FeatherIconsPack } from \"./src/theme/feather-icons\";\nimport { IoniconsIconsPack } from \"./src/theme/Ionicons\";\nimport { FontAwesomeIconsPack } from \"./src/theme/fontawesome\";\nimport { AppNavigator } from \"./src/navigation/navigation\";\nimport { ThemeContext } from \"./src/theme/theme-context\";\nimport { default as themes } from \"./src/theme/custom-theme.json\";\nimport { default as mapping } from \"./mapping.json\";\nimport Track from \"./track\";\nimport { HomeScreen } from \"./src/screens/Home\";\nimport { CardScreen } from \"./src/screens/card\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar customFonts = {\n  Proxima: require(\"./assets/fonts/proxima-Regular.ttf\"),\n  ProximaSemi: require(\"./assets/fonts/proxima-SemiBold.ttf\"),\n  ProximaBold: require(\"./assets/fonts/proxima-Bold.otf\"),\n  Vibur: require(\"./assets/fonts/Vibur-Regular.ttf\"),\n  Brassmono: require(\"./assets/fonts/brass-mono.otf\"),\n  Sanfrancisco: require(\"./assets/fonts/SanFrancisco.ttf\"),\n  Sofia: require(\"./assets/fonts/SofiaPro-Medium.ttf\")\n};\n\nvar Loaded = function Loaded() {\n  var _useFonts = useFonts(customFonts),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      isLoaded = _useFonts2[0];\n\n  if (!isLoaded) {\n    return React.createElement(AppLoading, null);\n  }\n\n  return React.createElement(CardScreen, null);\n};\n\nvar removeData = function removeData(value) {\n  return _regeneratorRuntime.async(function removeData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"userInfo\"));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"shit didn't remove\");\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar storeData = function storeData(name, value) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function storeData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          jsonValue = value === String ? value : JSON.stringify(value);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(name, jsonValue));\n\n        case 4:\n          _context2.next = 8;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nexport default function App() {\n  var renderCount = React.useRef(0);\n\n  var _React$useState = React.useState(\"light\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      theme = _React$useState2[0],\n      setTheme = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userInfo = _React$useState4[0],\n      setUserInfo = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      success = _React$useState6[0],\n      setSuccess = _React$useState6[1];\n\n  var toggleTheme = function toggleTheme() {\n    var nextTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(nextTheme);\n    storeData(\"theme\", nextTheme);\n  };\n\n  React.useEffect(function () {\n    var getUserinfo = function getUserinfo() {\n      var value, json;\n      return _regeneratorRuntime.async(function getUserinfo$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userInfo\"));\n\n            case 3:\n              value = _context3.sent;\n\n              if (!(value !== null && userInfo === null)) {\n                _context3.next = 10;\n                break;\n              }\n\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(JSON.parse(value));\n\n            case 7:\n              json = _context3.sent;\n              json === null || userInfo !== null ? null : setUserInfo(json);\n              setSuccess(true);\n\n            case 10:\n              if (value === null && userInfo === null) {\n                setSuccess(false);\n              }\n\n              _context3.next = 16;\n              break;\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"shit could not be read\");\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 13]], Promise);\n    };\n\n    var getThemeinfo = function getThemeinfo() {\n      var value, jsonValue;\n      return _regeneratorRuntime.async(function getThemeinfo$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"theme\"));\n\n            case 3:\n              value = _context4.sent;\n\n              if (value !== null) {\n                jsonValue = value.replace(/['\"]+/g, \"\");\n                value === null && value !== theme ? null : setTheme(jsonValue);\n              }\n\n              if (value === null && userInfo === null) {}\n\n              _context4.next = 11;\n              break;\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error(\"shit could not be read\");\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    getThemeinfo();\n    getUserinfo();\n  }, [success, theme]);\n  return React.createElement(React.Fragment, null, React.createElement(IconRegistry, {\n    icons: [EvaIconsPack, FeatherIconsPack, FontAwesomeIconsPack, IoniconsIconsPack, MaterialCommunityIconsPack]\n  }), React.createElement(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      toggleTheme: toggleTheme,\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      storeData: storeData,\n      removeData: removeData,\n      success: success,\n      setSuccess: setSuccess\n    }\n  }, React.createElement(ApplicationProvider, _extends({}, eva, {\n    theme: _objectSpread(_objectSpread({}, eva[theme]), themes),\n    customMapping: mapping\n  }), React.createElement(Loaded, {\n    userInfo: userInfo,\n    setUserInfo: setUserInfo,\n    success: success,\n    setSuccess: setSuccess\n  }))));\n}","map":{"version":3,"sources":["/home/software/work/Challenge/App.js"],"names":["StatusBar","React","eva","useFonts","AppLoading","ApplicationProvider","IconRegistry","EvaIconsPack","MaterialCommunityIconsPack","FeatherIconsPack","IoniconsIconsPack","FontAwesomeIconsPack","AppNavigator","ThemeContext","default","themes","mapping","Track","HomeScreen","CardScreen","AsyncStorage","customFonts","Proxima","require","ProximaSemi","ProximaBold","Vibur","Brassmono","Sanfrancisco","Sofia","Loaded","isLoaded","removeData","value","removeItem","console","error","storeData","name","jsonValue","String","JSON","stringify","setItem","App","renderCount","useRef","useState","theme","setTheme","userInfo","setUserInfo","success","setSuccess","toggleTheme","nextTheme","useEffect","getUserinfo","getItem","parse","json","getThemeinfo","replace"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,uBAAlD;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,0BAAT;AACA,SAASC,gBAAT;AACA,SAASC,iBAAT;AACA,SAASC,oBAAT;AACA,SAASC,YAAT;AACA,SAASC,YAAT;AACA,SAASC,OAAO,IAAIC,MAApB;AACA,SAASD,OAAO,IAAIE,OAApB;AACA,OAAOC,KAAP;AACA,SAASC,UAAT;AACA,SAASC,UAAT;AAGA,OAAOC,YAAP,MAAyB,2CAAzB;AAKA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAEC,OAAO,sCADE;AAElBC,EAAAA,WAAW,EAAED,OAAO,uCAFF;AAGlBE,EAAAA,WAAW,EAAEF,OAAO,mCAHF;AAIlBG,EAAAA,KAAK,EAAEH,OAAO,oCAJI;AAKlBI,EAAAA,SAAS,EAAEJ,OAAO,iCALA;AAMlBK,EAAAA,YAAY,EAAEL,OAAO,mCANH;AAOlBM,EAAAA,KAAK,EAAEN,OAAO;AAPI,CAApB;;AAUA,IAAMO,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,kBACA3B,QAAQ,CAACkB,WAAD,CADR;AAAA;AAAA,MACZU,QADY;;AAGnB,MAAI,CAACA,QAAL,EAAe;AACb,WAAO,oBAAC,UAAD,OAAP;AACD;;AAGD,SAAO,oBAAC,UAAD,OAAP;AACD,CATD;;AAWA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAETb,YAAY,CAACc,UAAb,CAAwB,UAAxB,CAFS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKfC,UAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOC,IAAP,EAAaL,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAERM,UAAAA,SAFQ,GAEIN,KAAK,KAAKO,MAAV,GAAmBP,KAAnB,GAA2BQ,IAAI,CAACC,SAAL,CAAeT,KAAf,CAF/B;AAAA;AAAA,2CAGRb,YAAY,CAACuB,OAAb,CAAqBL,IAArB,EAA2BC,SAA3B,CAHQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;;AAUA,eAAe,SAASK,GAAT,GAAe;AAC5B,MAAMC,WAAW,GAAG5C,KAAK,CAAC6C,MAAN,CAAa,CAAb,CAApB;;AAD4B,wBAGF7C,KAAK,CAAC8C,QAAN,CAAe,OAAf,CAHE;AAAA;AAAA,MAGrBC,KAHqB;AAAA,MAGdC,QAHc;;AAAA,yBAKIhD,KAAK,CAAC8C,QAAN,CAAe,IAAf,CALJ;AAAA;AAAA,MAKrBG,QALqB;AAAA,MAKXC,WALW;;AAAA,yBAMElD,KAAK,CAAC8C,QAAN,CAAe,IAAf,CANF;AAAA;AAAA,MAMrBK,OANqB;AAAA,MAMZC,UANY;;AAQ5B,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMC,SAAS,GAAGP,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6B,OAA/C;AACAC,IAAAA,QAAQ,CAACM,SAAD,CAAR;AACAlB,IAAAA,SAAS,CAAC,OAAD,EAAUkB,SAAV,CAAT;AACD,GAJD;;AAMAtD,EAAAA,KAAK,CAACuD,SAAN,CAAgB,YAAM;AAKpB,QAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEIrC,YAAY,CAACsC,OAAb,CAAqB,UAArB,CAFJ;;AAAA;AAEVzB,cAAAA,KAFU;;AAAA,oBAGZA,KAAK,KAAK,IAAV,IAAkBiB,QAAQ,KAAK,IAHnB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAIKT,IAAI,CAACkB,KAAL,CAAW1B,KAAX,CAJL;;AAAA;AAIR2B,cAAAA,IAJQ;AAMdA,cAAAA,IAAI,KAAK,IAAT,IAAiBV,QAAQ,KAAK,IAA9B,GAAqC,IAArC,GAA4CC,WAAW,CAACS,IAAD,CAAvD;AACAP,cAAAA,UAAU,CAAC,IAAD,CAAV;;AAPc;AAShB,kBAAIpB,KAAK,KAAK,IAAV,IAAkBiB,QAAQ,KAAK,IAAnC,EAAyC;AACvCG,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAXe;AAAA;;AAAA;AAAA;AAAA;AAchBlB,cAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd;;AAdgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAkBA,QAAMyB,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEGzC,YAAY,CAACsC,OAAb,CAAqB,OAArB,CAFH;;AAAA;AAEXzB,cAAAA,KAFW;;AAGjB,kBAAIA,KAAK,KAAK,IAAd,EAAoB;AACZM,gBAAAA,SADY,GACAN,KAAK,CAAC6B,OAAN,CAAc,QAAd,EAAwB,EAAxB,CADA;AAElB7B,gBAAAA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKe,KAA5B,GAAoC,IAApC,GAA2CC,QAAQ,CAACV,SAAD,CAAnD;AACD;;AACD,kBAAIN,KAAK,KAAK,IAAV,IAAkBiB,QAAQ,KAAK,IAAnC,EAAyC,CAExC;;AATgB;AAAA;;AAAA;AAAA;AAAA;AAYjBf,cAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd;;AAZiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAgBAyB,IAAAA,YAAY;AACZJ,IAAAA,WAAW;AACZ,GAzCD,EAyCG,CAACL,OAAD,EAAUJ,KAAV,CAzCH;AA2CA,SACE,0CACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAE,CACLzC,YADK,EAELE,gBAFK,EAGLE,oBAHK,EAILD,iBAJK,EAKLF,0BALK;AADT,IADF,EAUE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLwC,MAAAA,KAAK,EAALA,KADK;AAELM,MAAAA,WAAW,EAAXA,WAFK;AAGLJ,MAAAA,QAAQ,EAARA,QAHK;AAILC,MAAAA,WAAW,EAAXA,WAJK;AAKLd,MAAAA,SAAS,EAATA,SALK;AAMLL,MAAAA,UAAU,EAAVA,UANK;AAOLoB,MAAAA,OAAO,EAAPA,OAPK;AAQLC,MAAAA,UAAU,EAAVA;AARK;AADT,KAYE,oBAAC,mBAAD,eACMnD,GADN;AAEE,IAAA,KAAK,kCAAOA,GAAG,CAAC8C,KAAD,CAAV,GAAsBjC,MAAtB,CAFP;AAGE,IAAA,aAAa,EAAEC;AAHjB,MAME,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAEkC,QADZ;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,UAAU,EAAEC;AAJd,IANF,CAZF,CAVF,CADF;AAuCD","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport { useFonts } from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport { MaterialCommunityIconsPack } from \"./src/theme/MaterialCommunityIcons\";\nimport { FeatherIconsPack } from \"./src/theme/feather-icons\";\nimport { IoniconsIconsPack } from \"./src/theme/Ionicons\";\nimport { FontAwesomeIconsPack } from \"./src/theme/fontawesome\";\nimport { AppNavigator } from \"./src/navigation/navigation\";\nimport { ThemeContext } from \"./src/theme/theme-context\";\nimport { default as themes } from \"./src/theme/custom-theme.json\";\nimport { default as mapping } from \"./mapping.json\";\nimport Track from \"./track\";\nimport { HomeScreen } from \"./src/screens/Home\";\nimport { CardScreen } from \"./src/screens/card\";\n// pack='feather' hidden={true} dark, (eva[theme]),\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\n// import { enableScreens } from \"react-native-screens\";\n// enableScreens();\n\nconst customFonts = {\n  Proxima: require(\"./assets/fonts/proxima-Regular.ttf\"),\n  ProximaSemi: require(\"./assets/fonts/proxima-SemiBold.ttf\"),\n  ProximaBold: require(\"./assets/fonts/proxima-Bold.otf\"),\n  Vibur: require(\"./assets/fonts/Vibur-Regular.ttf\"),\n  Brassmono: require(\"./assets/fonts/brass-mono.otf\"),\n  Sanfrancisco: require(\"./assets/fonts/SanFrancisco.ttf\"),\n  Sofia: require(\"./assets/fonts/SofiaPro-Medium.ttf\"),\n};\n\nconst Loaded = () => {\n  const [isLoaded] = useFonts(customFonts);\n\n  if (!isLoaded) {\n    return <AppLoading />;\n  }\n  // from the custom App we return the component we assigned to RootApp.\n\n  return <CardScreen />; // <AppNavigator />; //<HomeScreen />\n};\n\nconst removeData = async (value) => {\n  try {\n    await AsyncStorage.removeItem(\"userInfo\"); //removeItem()\n  } catch (e) {\n    // saving error\n    console.error(\"shit didn't remove\");\n  }\n};\n\nconst storeData = async (name, value) => {\n  try {\n    const jsonValue = value === String ? value : JSON.stringify(value);\n    await AsyncStorage.setItem(name, jsonValue);\n  } catch (e) {\n    // saving error\n    // console.log(\"shit didn't save\");\n  }\n};\n\nexport default function App() {\n  const renderCount = React.useRef(0);\n\n  const [theme, setTheme] = React.useState(\"light\");\n\n  const [userInfo, setUserInfo] = React.useState(null);\n  const [success, setSuccess] = React.useState(null);\n\n  const toggleTheme = () => {\n    const nextTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(nextTheme);\n    storeData(\"theme\", nextTheme);\n  };\n\n  React.useEffect(() => {\n    // renderCount.current = renderCount.current + 1;\n\n    // console.log(renderCount.current);\n\n    const getUserinfo = async () => {\n      try {\n        const value = await AsyncStorage.getItem(\"userInfo\"); //removeItem() getAllKeys()\n        if (value !== null && userInfo === null) {\n          const json = await JSON.parse(value);\n\n          json === null || userInfo !== null ? null : setUserInfo(json); // setUserInfo(json)\n          setSuccess(true);\n        }\n        if (value === null && userInfo === null) {\n          setSuccess(false);\n        }\n      } catch (e) {\n        // error reading value\n        console.error(\"shit could not be read\");\n      }\n    };\n\n    const getThemeinfo = async () => {\n      try {\n        const value = await AsyncStorage.getItem(\"theme\"); //removeItem() getAllKeys()\n        if (value !== null) {\n          const jsonValue = value.replace(/['\"]+/g, \"\");\n          value === null && value !== theme ? null : setTheme(jsonValue); // setUserInfo(json)\n        }\n        if (value === null && userInfo === null) {\n          // setTheme(\"light\");\n        }\n      } catch (e) {\n        // error reading value\n        console.error(\"shit could not be read\");\n      }\n    };\n\n    getThemeinfo();\n    getUserinfo();\n  }, [success, theme]);\n\n  return (\n    <>\n      <IconRegistry\n        icons={[\n          EvaIconsPack,\n          FeatherIconsPack,\n          FontAwesomeIconsPack,\n          IoniconsIconsPack,\n          MaterialCommunityIconsPack,\n        ]}\n      />\n      <ThemeContext.Provider\n        value={{\n          theme,\n          toggleTheme,\n          userInfo,\n          setUserInfo,\n          storeData,\n          removeData,\n          success,\n          setSuccess,\n        }}\n      >\n        <ApplicationProvider\n          {...eva}\n          theme={{ ...eva[theme], ...themes }}\n          customMapping={mapping}\n        >\n          {/* <StatusBar style=\"auto\" /> */}\n          <Loaded\n            userInfo={userInfo}\n            setUserInfo={setUserInfo}\n            success={success}\n            setSuccess={setSuccess}\n          />\n        </ApplicationProvider>\n      </ThemeContext.Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}