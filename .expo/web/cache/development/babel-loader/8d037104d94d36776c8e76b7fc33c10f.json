{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/software/work/Challenge/src/screens/Login.js\";\n\nimport React from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { Divider, Icon, Layout, Text, Input, useStyleSheet, StyleService } from \"@ui-kitten/components\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from \"react-native-responsive-screen\";\nimport { LoginInput, SignupInput, AltLogin, Loader, ResetPassword, BackIcon } from \"../components/Login\";\nimport Constants from \"expo-constants\";\nexport var LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var styles = useStyleSheet(themedStyles);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      success = _React$useState4[0],\n      setSuccess = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      reset = _React$useState6[0],\n      setReset = _React$useState6[1];\n\n  var _React$useState7 = React.useState(true),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      login = _React$useState8[0],\n      setLogin = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      signup = _React$useState10[0],\n      setSignup = _React$useState10[1];\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      marginTop: Constants.statusBarHeight\n    }\n  }, React.createElement(Layout, null, React.createElement(View, {\n    style: styles.shadow\n  }, React.createElement(ImageBackground, {\n    source: require(\"../../assets/login.png\"),\n    style: styles.container\n  }, login ? React.createElement(React.Fragment, null, React.createElement(LoginInput, {\n    setLoading: setLoading,\n    setReset: setReset,\n    setLogin: setLogin,\n    navigation: navigation,\n    setSuccess: setSuccess\n  }), React.createElement(AltLogin, {\n    setLogin: setLogin,\n    setSignup: setSignup\n  })) : null, signup || reset ? React.createElement(BackIcon, {\n    setReset: setReset,\n    setLogin: setLogin\n  }) : null, signup ? React.createElement(SignupInput, {\n    navigation: navigation,\n    setLoading: setLoading,\n    setSuccess: setSuccess,\n    setLogin: setLogin\n  }) : null, reset === true ? React.createElement(ResetPassword, {\n    setLoading: setLoading\n  }) : null)), loading === true ? React.createElement(Loader, {\n    success: success\n  }) : null));\n};\nvar themedStyles = StyleService.create({\n  container: {\n    height: hp(100),\n    width: wp(100),\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  shadow: {\n    backgroundColor: \"rgba(0, 0, 0, 0.07)\"\n  }\n});","map":{"version":3,"sources":["/home/software/work/Challenge/src/screens/Login.js"],"names":["React","Divider","Icon","Layout","Text","Input","useStyleSheet","StyleService","widthPercentageToDP","wp","heightPercentageToDP","hp","LoginInput","SignupInput","AltLogin","Loader","ResetPassword","BackIcon","Constants","LoginScreen","navigation","styles","themedStyles","useState","loading","setLoading","success","setSuccess","reset","setReset","login","setLogin","signup","setSignup","marginTop","statusBarHeight","shadow","require","container","create","height","width","justifyContent","alignItems","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { SafeAreaView, View, ImageBackground } from \"react-native\";\nimport {\n  Divider,\n  Icon,\n  Layout,\n  Text,\n  Input,\n  useStyleSheet,\n  StyleService,\n} from \"@ui-kitten/components\";\nimport {\n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp,\n} from \"react-native-responsive-screen\";\nimport {\n  LoginInput,\n  SignupInput,\n  AltLogin,\n  Loader,\n  ResetPassword,\n  BackIcon,\n} from \"../components/Login\";\nimport Constants from \"expo-constants\";\n\nexport const LoginScreen = ({ navigation }) => {\n  const styles = useStyleSheet(themedStyles);\n  const [loading, setLoading] = React.useState(false);\n  const [success, setSuccess] = React.useState(null);\n  const [reset, setReset] = React.useState(false);\n\n  const [login, setLogin] = React.useState(true);\n  const [signup, setSignup] = React.useState(false);\n\n  return (\n    <SafeAreaView style={{ marginTop: Constants.statusBarHeight }}>\n      <Layout>\n        <View style={styles.shadow}>\n          <ImageBackground\n            source={require(\"../../assets/login.png\")}\n            style={styles.container}\n          >\n            {login ? (\n              <>\n                <LoginInput\n                  setLoading={setLoading}\n                  setReset={setReset}\n                  setLogin={setLogin}\n                  navigation={navigation}\n                  setSuccess={setSuccess}\n                />\n                <AltLogin setLogin={setLogin} setSignup={setSignup} />\n              </>\n            ) : null}\n\n            {signup || reset ? (\n              <BackIcon setReset={setReset} setLogin={setLogin} />\n            ) : null}\n\n            {signup ? (\n              <SignupInput\n                navigation={navigation}\n                setLoading={setLoading}\n                setSuccess={setSuccess}\n                setLogin={setLogin}\n              />\n            ) : null}\n\n            {reset === true ? <ResetPassword setLoading={setLoading} /> : null}\n          </ImageBackground>\n        </View>\n        {loading === true ? <Loader success={success} /> : null}\n      </Layout>\n    </SafeAreaView>\n  );\n};\n\nconst themedStyles = StyleService.create({\n  container: {\n    height: hp(100),\n    width: wp(100),\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  shadow: {\n    backgroundColor: \"rgba(0, 0, 0, 0.07)\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}