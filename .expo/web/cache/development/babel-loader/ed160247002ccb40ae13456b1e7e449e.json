{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/software/work/Challenge/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport { useFonts } from \"expo-font\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport { MaterialCommunityIconsPack } from \"./src/theme/MaterialCommunityIcons\";\nimport { FeatherIconsPack } from \"./src/theme/feather-icons\";\nimport { IoniconsIconsPack } from \"./src/theme/Ionicons\";\nimport { FontAwesomeIconsPack } from \"./src/theme/fontawesome\";\nimport { ThemeContext } from \"./src/theme/theme-context\";\nimport { default as themes } from \"./src/theme/custom-theme.json\";\nimport { default as mapping } from \"./mapping.json\";\nimport Gestures from \"./src/Gestures\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar customFonts = {\n  Proxima: require(\"./assets/fonts/proxima-Regular.ttf\"),\n  ProximaSemi: require(\"./assets/fonts/proxima-SemiBold.ttf\"),\n  ProximaBold: require(\"./assets/fonts/proxima-Bold.otf\"),\n  Vibur: require(\"./assets/fonts/Vibur-Regular.ttf\"),\n  Brassmono: require(\"./assets/fonts/brass-mono.otf\"),\n  Sanfrancisco: require(\"./assets/fonts/SanFrancisco.ttf\"),\n  Sofia: require(\"./assets/fonts/SofiaPro-Medium.ttf\")\n};\nexport default function App() {\n  var _React$useState = React.useState(\"light\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      theme = _React$useState2[0],\n      setTheme = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      success = _React$useState4[0],\n      setSuccess = _React$useState4[1];\n\n  var toggleTheme = function toggleTheme() {\n    var nextTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(nextTheme);\n  };\n\n  React.useEffect(function () {}, [theme]);\n  return React.createElement(React.Fragment, null, React.createElement(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      toggleTheme: toggleTheme,\n      success: success,\n      setSuccess: setSuccess\n    }\n  }, React.createElement(ApplicationProvider, _extends({}, eva, {\n    theme: _objectSpread(_objectSpread({}, eva[theme]), themes),\n    customMapping: mapping\n  }), React.createElement(Gestures, null))));\n}","map":{"version":3,"sources":["/home/software/work/Challenge/App.js"],"names":["StatusBar","React","eva","useFonts","ApplicationProvider","IconRegistry","EvaIconsPack","MaterialCommunityIconsPack","FeatherIconsPack","IoniconsIconsPack","FontAwesomeIconsPack","ThemeContext","default","themes","mapping","Gestures","AsyncStorage","customFonts","Proxima","require","ProximaSemi","ProximaBold","Vibur","Brassmono","Sanfrancisco","Sofia","App","useState","theme","setTheme","success","setSuccess","toggleTheme","nextTheme","useEffect"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,uBAAlD;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,0BAAT;AACA,SAASC,gBAAT;AACA,SAASC,iBAAT;AACA,SAASC,oBAAT;AACA,SAASC,YAAT;AACA,SAASC,OAAO,IAAIC,MAApB;AACA,SAASD,OAAO,IAAIE,OAApB;AACA,OAAOC,QAAP;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAEC,OAAO,sCADE;AAElBC,EAAAA,WAAW,EAAED,OAAO,uCAFF;AAGlBE,EAAAA,WAAW,EAAEF,OAAO,mCAHF;AAIlBG,EAAAA,KAAK,EAAEH,OAAO,oCAJI;AAKlBI,EAAAA,SAAS,EAAEJ,OAAO,iCALA;AAMlBK,EAAAA,YAAY,EAAEL,OAAO,mCANH;AAOlBM,EAAAA,KAAK,EAAEN,OAAO;AAPI,CAApB;AAUA,eAAe,SAASO,GAAT,GAAe;AAAA,wBACFzB,KAAK,CAAC0B,QAAN,CAAe,OAAf,CADE;AAAA;AAAA,MACrBC,KADqB;AAAA,MACdC,QADc;;AAAA,yBAGE5B,KAAK,CAAC0B,QAAN,CAAe,IAAf,CAHF;AAAA;AAAA,MAGrBG,OAHqB;AAAA,MAGZC,UAHY;;AAK5B,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMC,SAAS,GAAGL,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6B,OAA/C;AACAC,IAAAA,QAAQ,CAACI,SAAD,CAAR;AACD,GAHD;;AAKAhC,EAAAA,KAAK,CAACiC,SAAN,CAAgB,YAAM,CAAE,CAAxB,EAA0B,CAACN,KAAD,CAA1B;AAiBA,SACE,0CAUE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,KAAK,EAALA,KADK;AAELI,MAAAA,WAAW,EAAXA,WAFK;AAGLF,MAAAA,OAAO,EAAPA,OAHK;AAILC,MAAAA,UAAU,EAAVA;AAJK;AADT,KAQE,oBAAC,mBAAD,eACM7B,GADN;AAEE,IAAA,KAAK,kCAAOA,GAAG,CAAC0B,KAAD,CAAV,GAAsBf,MAAtB,CAFP;AAGE,IAAA,aAAa,EAAEC;AAHjB,MAYE,oBAAC,QAAD,OAZF,CARF,CAVF,CADF;AAoCD","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport { useFonts } from \"expo-font\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport { MaterialCommunityIconsPack } from \"./src/theme/MaterialCommunityIcons\";\nimport { FeatherIconsPack } from \"./src/theme/feather-icons\";\nimport { IoniconsIconsPack } from \"./src/theme/Ionicons\";\nimport { FontAwesomeIconsPack } from \"./src/theme/fontawesome\";\nimport { ThemeContext } from \"./src/theme/theme-context\";\nimport { default as themes } from \"./src/theme/custom-theme.json\";\nimport { default as mapping } from \"./mapping.json\";\nimport Gestures from \"./src/Gestures\";\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst customFonts = {\n  Proxima: require(\"./assets/fonts/proxima-Regular.ttf\"),\n  ProximaSemi: require(\"./assets/fonts/proxima-SemiBold.ttf\"),\n  ProximaBold: require(\"./assets/fonts/proxima-Bold.otf\"),\n  Vibur: require(\"./assets/fonts/Vibur-Regular.ttf\"),\n  Brassmono: require(\"./assets/fonts/brass-mono.otf\"),\n  Sanfrancisco: require(\"./assets/fonts/SanFrancisco.ttf\"),\n  Sofia: require(\"./assets/fonts/SofiaPro-Medium.ttf\"),\n};\n\nexport default function App() {\n  const [theme, setTheme] = React.useState(\"light\");\n\n  const [success, setSuccess] = React.useState(null);\n\n  const toggleTheme = () => {\n    const nextTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(nextTheme);\n  };\n\n  React.useEffect(() => {}, [theme]);\n\n  // const getThemeinfo = async () => {\n  //   try {\n  //     const value = await AsyncStorage.getItem(\"theme\"); //removeItem() getAllKeys()\n  //     if (value !== null) {\n  //       const jsonValue = value.replace(/['\"]+/g, \"\");\n  //       value === null && value !== theme ? null : setTheme(jsonValue); // setUserInfo(json)\n  //     }\n  //     if (value === null) {\n  //       // setTheme(\"light\");\n  //     }\n  //   } catch (e) {\n  //     // error reading value\n  //     console.error(\"shit could not be read\");\n  //   }\n  // };\n  return (\n    <>\n      {/* <IconRegistry\n        icons={[\n          EvaIconsPack,\n          FeatherIconsPack,\n          FontAwesomeIconsPack,\n          IoniconsIconsPack,\n          MaterialCommunityIconsPack,\n        ]}\n      /> */}\n      <ThemeContext.Provider\n        value={{\n          theme,\n          toggleTheme,\n          success,\n          setSuccess,\n        }}\n      >\n        <ApplicationProvider\n          {...eva}\n          theme={{ ...eva[theme], ...themes }}\n          customMapping={mapping}\n        >\n          {/* <StatusBar style=\"auto\" /> */}\n          {/* <Loaded\n            userInfo={userInfo}\n            setUserInfo={setUserInfo}\n            success={success}\n            setSuccess={setSuccess}\n          /> */}\n          <Gestures />\n        </ApplicationProvider>\n      </ThemeContext.Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}